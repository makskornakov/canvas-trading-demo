{"ast":null,"code":"export const drawFunction = ctx => {\n  ctx.fillStyle = 'red';\n  ctx.fillRect(0, 0, 100, 100);\n};\nclass Candle2D {\n  constructor(originalOpen, originalClose, originalClow, originalHigh, candleCanvas) {\n    this.open = void 0;\n    this.close = void 0;\n    this.low = void 0;\n    this.high = void 0;\n    this.mountPoints = void 0;\n    this.getPoint = originalPoint => {\n      const {\n        height,\n        min,\n        max\n      } = this.candleCanvas;\n      const point = height * (max - originalPoint) / (max - min);\n      return point;\n    };\n  }\n  // private arrow function with original point as an argument\n}","map":{"version":3,"names":["drawFunction","ctx","fillStyle","fillRect","Candle2D","constructor","originalOpen","originalClose","originalClow","originalHigh","candleCanvas","open","close","low","high","mountPoints","getPoint","originalPoint","height","min","max","point"],"sources":["/Users/makskornakov/Desktop/someHook/canvas-trading/src/draw.ts"],"sourcesContent":["export const drawFunction = (ctx: CanvasRenderingContext2D) => {\n  ctx.fillStyle = 'red';\n  ctx.fillRect(0, 0, 100, 100);\n};\n\ninterface candleToDraw {\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  indicators: {\n    revBar: 'buy' | 'sell';\n    fractal: 'up' | 'down';\n    alligator: {\n      jaw: number;\n      teeth: number;\n      lips: number;\n    };\n  };\n}\n\ninterface CandleCanvas {\n  width: number;\n  height: number;\n  min: number;\n  max: number;\n}\n\ninterface CandleMountPoints {\n  above: {\n    first: number;\n    second: number;\n  };\n  below: {\n    first: number;\n    second: number;\n  };\n}\n\nclass Candle2D {\n  open: number;\n  close: number;\n  low: number;\n  high: number;\n  mountPoints: CandleMountPoints;\n\n  constructor(\n    originalOpen: number,\n    originalClose: number,\n    originalClow: number,\n    originalHigh: number,\n    candleCanvas: CandleCanvas\n  ) {}\n  // private arrow function with original point as an argument\n  private getPoint = (originalPoint: number) => {\n    const { height, min, max } = this.candleCanvas;\n    const point = (height * (max - originalPoint)) / (max - min);\n    return point;\n  };\n}\n"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAIC,GAA6B,IAAK;EAC7DA,GAAG,CAACC,SAAS,GAAG,KAAK;EACrBD,GAAG,CAACE,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC;AAC9B,CAAC;AAoCD,MAAMC,QAAQ,CAAC;EAObC,WAAW,CACTC,YAAoB,EACpBC,aAAqB,EACrBC,YAAoB,EACpBC,YAAoB,EACpBC,YAA0B,EAC1B;IAAA,KAZFC,IAAI;IAAA,KACJC,KAAK;IAAA,KACLC,GAAG;IAAA,KACHC,IAAI;IAAA,KACJC,WAAW;IAAA,KAUHC,QAAQ,GAAIC,aAAqB,IAAK;MAC5C,MAAM;QAAEC,MAAM;QAAEC,GAAG;QAAEC;MAAI,CAAC,GAAG,IAAI,CAACV,YAAY;MAC9C,MAAMW,KAAK,GAAIH,MAAM,IAAIE,GAAG,GAAGH,aAAa,CAAC,IAAKG,GAAG,GAAGD,GAAG,CAAC;MAC5D,OAAOE,KAAK;IACd,CAAC;EANE;EACH;AAMF"},"metadata":{},"sourceType":"module","externalDependencies":[]}