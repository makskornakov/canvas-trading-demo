{"ast":null,"code":"export const drawFunction = ctx => {\n  ctx.fillStyle = 'red';\n  ctx.fillRect(0, 0, 100, 100);\n};\nclass CandleCanvas {\n  constructor(width, height, candlesShown) {\n    this.width = void 0;\n    this.height = void 0;\n    this.candlesShown = void 0;\n    this.min = void 0;\n    this.max = void 0;\n    this.gap = void 0;\n    this.candleWidth = void 0;\n    this.width = width;\n    this.height = height;\n    this.candlesShown = candlesShown;\n    this.min = 0;\n    this.max = 0;\n    this.gap = this.getGapAndCandleWidth().gap;\n    this.candleWidth = this.getGapAndCandleWidth().candleWidth;\n  }\n  getGapAndCandleWidth() {\n    const gap = this.width / this.candlesShown / 10;\n    const candleWidth = (this.width / this.candlesShown - gap) / 2;\n    return {\n      gap,\n      candleWidth\n    };\n  }\n  minMaxCalc(candles) {\n    const min = Math.min(...candles.map(candle => candle.low));\n    const max = Math.max(...candles.map(candle => candle.high));\n    this.min = min;\n    this.max = max;\n  }\n}\nclass Candle2D {\n  constructor(originalOpen, originalClose, originalLow, originalHigh, _candleCanvas) {\n    this.open = void 0;\n    this.close = void 0;\n    this.low = void 0;\n    this.high = void 0;\n    this.mountPoints = void 0;\n    this.getPoint = (originalPoint, candleCanvas) => {\n      const point = (candleCanvas.max - originalPoint) / (candleCanvas.max - candleCanvas.min) * candleCanvas.height;\n      return point;\n    };\n    this.open = this.getPoint(originalOpen, _candleCanvas);\n    this.close = this.getPoint(originalClose, _candleCanvas);\n    this.low = this.getPoint(originalLow, _candleCanvas);\n    this.high = this.getPoint(originalHigh, _candleCanvas);\n    this.mountPoints = this.getMountPoints();\n  }\n  // private arrow function with original point as an argument\n\n  getMountPoints() {\n    const above = {\n      first: this.open,\n      second: this.close\n    };\n    const below = {\n      first: this.close,\n      second: this.open\n    };\n    return {\n      above,\n      below\n    };\n  }\n}","map":{"version":3,"names":["drawFunction","ctx","fillStyle","fillRect","CandleCanvas","constructor","width","height","candlesShown","min","max","gap","candleWidth","getGapAndCandleWidth","minMaxCalc","candles","Math","map","candle","low","high","Candle2D","originalOpen","originalClose","originalLow","originalHigh","candleCanvas","open","close","mountPoints","getPoint","originalPoint","point","getMountPoints","above","first","second","below"],"sources":["/Users/makskornakov/Desktop/someHook/canvas-trading/src/draw.ts"],"sourcesContent":["export const drawFunction = (ctx: CanvasRenderingContext2D) => {\n  ctx.fillStyle = 'red';\n  ctx.fillRect(0, 0, 100, 100);\n};\n\ninterface candleToDraw {\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  indicators: {\n    revBar: 'buy' | 'sell';\n    fractal: 'up' | 'down';\n    alligator: {\n      jaw: number;\n      teeth: number;\n      lips: number;\n    };\n  };\n}\nclass CandleCanvas {\n  width: number;\n  height: number;\n  candlesShown: number;\n  min: number;\n  max: number;\n  gap: number;\n  candleWidth: number;\n\n  constructor(width: number, height: number, candlesShown: number) {\n    this.width = width;\n    this.height = height;\n    this.candlesShown = candlesShown;\n    this.min = 0;\n    this.max = 0;\n    this.gap = this.getGapAndCandleWidth().gap;\n    this.candleWidth = this.getGapAndCandleWidth().candleWidth;\n  }\n  private getGapAndCandleWidth() {\n    const gap = this.width / this.candlesShown / 10;\n    const candleWidth = (this.width / this.candlesShown - gap) / 2;\n    return { gap, candleWidth };\n  }\n  private minMaxCalc(candles: candleToDraw[]) {\n    const min = Math.min(...candles.map((candle) => candle.low));\n    const max = Math.max(...candles.map((candle) => candle.high));\n    this.min = min;\n    this.max = max;\n  }\n}\n\ninterface CandleMountPoints {\n  above: {\n    first: number;\n    second: number;\n  };\n  below: {\n    first: number;\n    second: number;\n  };\n}\n\nclass Candle2D {\n  open: number;\n  close: number;\n  low: number;\n  high: number;\n  mountPoints: CandleMountPoints;\n\n  constructor(\n    originalOpen: number,\n    originalClose: number,\n    originalLow: number,\n    originalHigh: number,\n    candleCanvas: CandleCanvas\n  ) {\n    this.open = this.getPoint(originalOpen, candleCanvas);\n    this.close = this.getPoint(originalClose, candleCanvas);\n    this.low = this.getPoint(originalLow, candleCanvas);\n    this.high = this.getPoint(originalHigh, candleCanvas);\n    this.mountPoints = this.getMountPoints();\n  }\n  // private arrow function with original point as an argument\n  private getPoint = (originalPoint: number, candleCanvas: CandleCanvas) => {\n    const point =\n      ((candleCanvas.max - originalPoint) /\n        (candleCanvas.max - candleCanvas.min)) *\n      candleCanvas.height;\n    return point;\n  };\n\n  private getMountPoints(): CandleMountPoints {\n    const above = {\n      first: this.open,\n      second: this.close,\n    };\n    const below = {\n      first: this.close,\n      second: this.open,\n    };\n    return {\n      above,\n      below,\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}